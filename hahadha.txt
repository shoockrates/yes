SELECT
  K.Pavadinimas,
  K.ISBN
FROM Stud.Knyga AS K
WHERE SUBSTRING(K.ISBN FROM 1 FOR 1) = SUBSTRING(K.ISBN FROM 4 FOR 1);


--2. Skaičius egzempliorių, kurie buvo gauti bibliotekoje praėjusį mėnesį ir jau buvo paimti skaityti.

SELECT
  COUNT(DISTINCT s.skaitytojas) AS skaitytoju_skaicius,
  COUNT(DISTINCT e.nr)          AS egzemplioriu_kiekis,
  COUNT(DISTINCT e.ISBN)          AS knygu_skaicius,
  COUNT(*) as egzemplioriu_ir_skaitytoju_skaicius

FROM Stud.Skaitymas AS s
JOIN Stud.Egzempliorius AS e ON e.nr = s.egzempliorius
WHERE s.paimta >= date_trunc('month', CURRENT_DATE) - INTERVAL '1 month'
  AND s.paimta IS NOT NULL;



SELECT t.table_schema,
       t.table_name,
       string_agg(c.column_name || ' ' || c.data_type, ', ' ORDER BY c.ordinal_position) AS columns
FROM information_schema.tables t
JOIN information_schema.columns c
  ON c.table_schema = t.table_schema
 AND c.table_name   = t.table_name
WHERE t.table_type = 'BASE TABLE'
  AND t.table_schema NOT IN ('pg_catalog','information_schema')
GROUP BY t.table_schema, t.table_name
ORDER BY t.table_schema, t.table_name;






--3. Kiekvienai datai, kada turi būti grąžinta bent viena knyga, grąžintinų skirtingų knygų skaičius 
-- ir visų jų egzempliorių bendras puslapių skaičius.
SELECT
    s.grazinti AS data,
    COUNT(DISTINCT k.ISBN) AS knygu_skaicius,
    sum(k.puslapiai) as is_viso_puslapiu
    COUNT(DISTINCT s.nr) AS egzemplioriu_skaicius,
    COUNT(*) AS skaitymu_skaicius                         

FROM skaitymas AS s
JOIN egzempliorius AS e
  ON e.Nr = s.egzempliorius
JOIN knyga AS k
  ON k.ISBN = e.ISBN
WHERE s.grazinti IS NOT NULL
GROUP BY s.grazinti
ORDER BY s.grazinti;


--3.1
SELECT
    s.grazinti AS data,
    COUNT(DISTINCT k.ISBN) AS knygu_skaicius,
    SUM(k.puslapiai) AS is_viso_puslapiu,
    COUNT(DISTINCT s.nr) AS egzemplioriu_skaicius,
    COUNT(*) AS skaitymu_skaicius
FROM skaitymas AS s
JOIN egzempliorius AS e
  ON e.Nr = s.egzempliorius
JOIN knyga AS k
  ON k.ISBN = e.ISBN
WHERE s.grazinti IS NOT NULL
GROUP BY s.grazinti
HAVING COUNT(*) = COUNT(DISTINCT s.nr)
ORDER BY s.grazinti;




-- 4. Vardai ir pavardės skaitytojų, kurie yra negrąžinę daugiau egzempliorių nei
-- vidutiniškai visi skaitytojai yra negrąžinę. Greta pateikti ir tų skaitytojų negrąžintų egzempliorių skaičius.

WITH per_reader AS (
  SELECT
      s.Nr AS skaitytojas_id,
      s.Vardas,
      s.Pavarde,
      COUNT(*) FILTER (WHERE sk.grazinta IS NULL) AS negrazinti
  FROM stud.Skaitytojas s
  LEFT JOIN stud.Skaitymas sk
         ON sk.Skaitytojas = s.Nr
  GROUP BY s.Nr, s.Vardas, s.Pavarde
),
avg_all AS (
  SELECT AVG(negrazinti::numeric) AS vidurkis
  FROM per_reader
)
SELECT
    pr.Vardas,
    pr.Pavarde,
    pr.negrazinti AS negrazintu_egz_sk

FROM per_reader pr
CROSS JOIN avg_all a
WHERE pr.negrazinti > a.vidurkis
ORDER BY pr.negrazinti DESC;





-- 4.1 Vardai ir pavardės skaitytojų, kurie yra negrąžinę daugiau egzempliorių nei
-- vidutiniškai visi skaitytojai yra negrąžinę. Greta pateikti ir tų skaitytojų negrąžintų egzempliorių skaičius.

WITH per_reader AS (
    SELECT
        s.Nr AS skaitytojas_id,
        s.Vardas,
        s.Pavardė,
        COUNT(*) FILTER (WHERE sk.Grąžinta IS NULL) AS negrąžinti
    FROM stud.Skaitytojas s
    LEFT JOIN stud.Skaitymas sk
           ON sk.Skaitytojas = s.Nr
    GROUP BY s.Nr, s.Vardas, s.Pavardė
),
avg_all AS (
    SELECT AVG(negrąžinti::numeric) AS vidurkis
    FROM per_reader
)
SELECT
    pr.Vardas,
    pr.Pavardė,
    pr.negrąžinti AS negrąžintų_egz_sk
FROM per_reader pr
CROSS JOIN avg_all a
WHERE pr.negrąžinti > a.vidurkis
ORDER BY pr.negrąžinti DESC;







--4.3
WITH negrązinti_skaiciai AS (
    SELECT 
        sk.Nr,
        sk.Vardas,
        sk.Pavardė,
        COUNT(sm.Nr) AS negrązintu_egz_skaicius
    FROM Skaitytojas sk
    JOIN Skaitymas sm ON sk.Nr = sm.Skaitytojas
    WHERE sm.Grąžinta IS NULL
    GROUP BY sk.Nr, sk.Vardas, sk.Pavardė
),
vidurkis AS (
    SELECT AVG(negrązintu_egz_skaicius) AS vid_negrązintu
    FROM negrązinti_skaiciai
)
SELECT 
    ns.Vardas,
    ns.Pavardė,
    ns.negrązintu_egz_skaicius
FROM negrązinti_skaiciai ns
CROSS JOIN vidurkis v
WHERE ns.negrązintu_egz_skaicius > v.vid_negrązintu
ORDER BY ns.negrązintu_egz_skaicius DESC;





WITH negrązinti_skaiciai AS (
    SELECT 
        sk.Nr,
        sk.Vardas,
        sk.Pavardė,
        COUNT(sm.Nr) AS negrązintu_egz_skaicius
    FROM Skaitytojas sk
    JOIN Skaitymas sm ON sk.Nr = sm.Skaitytojas
    WHERE sm.Grąžinta IS NULL
    GROUP BY sk.Nr, sk.Vardas, sk.Pavardė
),
vidurkis AS (
    SELECT AVG(negrązintu_egz_skaicius) AS vid_negrązintu
    FROM negrązinti_skaiciai
)
filtruoti_skaitytojai AS (
    SELECT 
        ns.Vardas,
        ns.Pavardė,
        ns.negrązintu_egz_skaicius
    FROM negrązinti_skaiciai ns
    CROSS JOIN vidurkis v
    WHERE ns.negrązintu_egz_skaicius > v.vid_negrązintu
)
SELECT 
    ns.Vardas,
    ns.Pavardė,
  (SELECT COUNT(DISTINCT CONCAT(Vardas, ' ', Pavardė)) FROM filtruoti_skaitytojai) AS skaitytoju_skaicius,
    ns.negrązintu_egz_skaicius
FROM negrązinti_skaiciai ns
CROSS JOIN vidurkis v
WHERE ns.negrązintu_egz_skaicius > v.vid_negrązintu
ORDER BY ns.negrązintu_egz_skaicius DESC;





WITH negrazinti_skaiciai AS (
  SELECT
    sk.Nr,
    sk.Vardas,
    sk. Pavarde,
COUNT(sm.Nr) AS negrazintu_egz_skaicius
FROM stud. Skaitytojas sk
JOIN stud.Skaitymas sm ON sk.Nr = sm.Skaitytojas
WHERE sm.Grazinta IS NULL
GROUP BY sk.Nr, sk.Vardas, sk.Pavarde
),
vidurkis AS (
SELECT AVG(negrazintu_egz_skaicius) AS vid_negrazintu
FROM negrazinti_skaiciai
)
SELECT
  ns.Vardas,
  ns.Pavarde,
  ns.negrazintu_egz_skaicius,
  -- 1 as skaitytoju skaicius 1,
  count(distinct ns.Nr) as skaitytoju_skaicius

FROM negrazinti_skaiciai ns

CROSS JOIN vidurkis v

WHERE ns.negrazintu_egz_skaicius > v.vid_negrazintu

group by ns.Nr, ns.Vardas, ns.Pavarde, ns.negrazintu_egz_skaicius
ORDER BY ns.negrazintu_egz_skaicius DESC;

-- 5. Kiekvienai duomenų bazės lentelei - konkretaus skaitinio tipo stulpelių skaičius.

select
  c.table_schema,
  c.table_name,
  count(*) as numeric_columns
from information_schema.columns c
join information_schema.tables t
  on t.table_schema = c.table_schema
 and t.table_name   = c.table_name
where t.table_type = 'BASE TABLE'                                         -- tik lentelės [web:6]
  and c.table_schema not in ('information_schema','pg_catalog')           -- be sisteminių [web:6]
  and c.data_type in (                                                    -- skaitiniai tipai [web:8][web:17][web:20]
    'smallint','integer','bigint',
    'decimal','numeric',
    'real','double precision',
    'smallserial','serial','bigserial',
    'money'
  )
group by c.table_schema, c.table_name
order by c.table_schema, c.table_name;



